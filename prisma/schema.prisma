generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  //url      = env("DEV_DATABASE_URL")
  url      = "mysql://db_user:P!0h42sd5@46.250.235.56:3306/lottery"
}

model User {
  id               Int                @id @default(autoincrement())
  name             String
  username         String             @unique
  password         String
  mobile           String
  credit           Decimal            @default(0.00) @db.Decimal(65, 2)
  credit_limit     Decimal            @default(0.00) @db.Decimal(65, 2)
  remark           String?
  status           User_status        @default(ACTIVE)
  account_level    User_account_level
  currency         String             @default("['MYR','SGD','THB']") @db.VarChar(255)
  is_open_downline Boolean            @default(true)
  ip_address       String?
  updated_at       DateTime           @updatedAt
  created_at       DateTime           @default(now())
}

model Admin {
  id         Int          @id @default(autoincrement())
  name       String
  username   String       @unique
  password   String
  status     Admin_status @default(ACTIVE)
  role       Role
  updated_at DateTime     @updatedAt
  created_at DateTime     @default(now())
}

enum Admin_status {
  ACTIVE
  INACTIVE
}

enum User_status {
  ACTIVE
  INACTIVE
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}

enum Role {
  MASTER
}

enum User_account_level {
  Agent
}

model Bet {
  id           Int       @id @default(autoincrement())
  user_id      String    @db.VarChar(255)
  lottery_type String?
  receipt_id   String    @db.VarChar(255)
  number       String?
  amount       Decimal?
  bet_type     String?
  status       Status?
  result_date  DateTime? @db.Date
  created_at   DateTime  @default(now())
}

model Receipt {
  id           Int      @id @default(autoincrement())
  user_id      String   @db.VarChar(255)
  remark       String?  @db.VarChar(255)
  bet_method   String?  @db.VarChar(255)
  total_amount Decimal?
  currency     String
  ip_address   String?
  status       Status
  created_at   DateTime @default(now())
}

model Round {
  id          Int       @id @default(autoincrement())
  lottery_id  String    @db.VarChar(255)
  code        String
  start_time  DateTime? 
  close_time  DateTime? 
  result_time DateTime? 
  result      String?
  status      Status
  created_at  DateTime  @default(now())
}

model Lottery {
  id            Int      @id @default(autoincrement())
  type          String
  code          String
  detail        Json
  open_before   Int      @default(0)
  open_time     DateTime @db.Time
  close_weekday Json     @default("[]")
  close_extra   Json     @default("[]")
  off_holiday   Json     @default("[]")
  close_after   Int?
  close_time    DateTime @db.Time
  result_after  Int?
  result_time   DateTime @db.Time
  status        Status
  updated_at    DateTime @updatedAt
  created_at    DateTime @default(now())
}


model LotteryResult {
  id           Int         @id @default(autoincrement())
  drawDate     DateTime
  lotteryType  LotteryType
  category     Category
  numbers      LotteryNumber[]
}

model LotteryNumber {
  id              Int            @id @default(autoincrement())
  lotteryResultId Int
  number          String
  lotteryResult   LotteryResult  @relation(fields: [lotteryResultId], references: [id], onDelete: Cascade)
}

enum LotteryType {
  MagnumMAGNUM
  PMPPMP
  TotoTOTO
  TOTO_5D
  TOTO_6D
  SingaporeSINGAPORE
  SabahSABAH
  SandakanSANDAKAN
  SarawakSARAWAK
  GDLottoGD
  GDLottoDRAGON
  GDLotto_9LOTTO
}

enum Category {
  FIRST
  SECOND
  THIRD
  STARTERS
  CONSOLATIONS
}
